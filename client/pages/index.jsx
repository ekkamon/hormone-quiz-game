import Head from 'next/head';
import Router from 'next/router';
import axios from '../axios.config';
import tw from 'tailwind-styled-components';
import { useState, useEffect } from 'react';
import { MdOutlineCheck } from 'react-icons/md';
import { errorHandle } from '../utils/error-handle';
import { useUser } from '../hook/user';
import LivingRoom from '../components/LivingRoom';

const Input = tw.input`
  block
  text-sm
  font-medium
  rounded-lg
  block 
  w-full
  p-2.5
  bg-gray-700
  border
  border-gray-600
  placeholder-gray-400
  text-white
  focus:outline-0
  focus:border-gray-500
`;

const CheckBox = tw.input`
  appearance-none
  w-4
  h-4
  border
  border-gray-600
  rounded
  bg-gray-700
  focus:ring-3 
  focus:ring-blue-600
  ring-offset-gray-800
`;

const Icon = tw.div`
  ${(props) => (props.disabled ? 'hidden' : '')}
  absolute
  h-4
  w-4
`;

const Button = tw.button`
  p-2
  rounded-lg
  text-sm
  w-full
  ${(props) => (!props.disabled ? 'bg-blue-700' : 'bg-blue-500')}
  shadow-light
  text-center
`;

export default function Index({ socket }) {
  const user = useUser();
  const [name, setName] = useState('');
  const [isRememberMe, setRememberMe] = useState(false);
  const [isRequest, setRequest] = useState(false);
  const [room, setRoom] = useState(null);

  // get name
  useEffect(() => {
    const userName = localStorage.getItem('name');
    if (userName) {
      setName(userName);
      setRememberMe(true);
    }
  }, []);

  // get room data every tick
  useEffect(() => {
    const interval = setInterval(() => {
      socket.emit('getRoomData');
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  // on checkbox running
  useEffect(() => {
    if (name != '') {
      localStorage.setItem('name', name);
    }

    if (!isRememberMe) {
      localStorage.removeItem('name');
    }
  }, [name, isRememberMe]);

  socket.on('updateRoomData', (room) => setRoom(room));

  if (room?.status != 'wating') {
    return <LivingRoom />;
  }

  const clickLogin = (e) => {
    e.preventDefault();
    setRequest(true);
    axios
      .post('/auth/login', { name, sid: socket.id })
      .then(() => {
        user.setUser({
          name,
          isLogin: true,
        });
        Router.push('lobby');
      })
      .catch(errorHandle)
      .finally(() => setRequest(false));
  };

  return (
    <>
      <Head>
        <title>Hormone Quiz</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='grid place-items-center mt-20'>
        <div className='block p-8 lg:w-96 w-4/5 rounded-lg bg-gray-800 text-white shadow-md'>
          <div className='text-xl font-bold text-gray-300 mb-5'>
            Hormone Quiz.
          </div>
          <div className='mb-6'>
            <div className='block mb-2 text-sm text-gray-300'>
              ชื่อทีมที่ต้องการตั้ง
            </div>
            <Input
              type='text'
              placeholder='Team name'
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
          </div>
          <div className='mb-6 flex items-start flex items-center h-5'>
            <div className='flex' onClick={() => setRememberMe(!isRememberMe)}>
              <CheckBox type='checkbox' />
              <Icon disabled={!isRememberMe}>
                <MdOutlineCheck />
              </Icon>
            </div>
            <label className='ml-2 text-sm text-gray-300'>จดจำชื่อฉัน</label>
          </div>
          <Button onClick={clickLogin} disabled={isRequest}>
            เข้าเกมเล่น
          </Button>
        </div>
      </div>
    </>
  );
}
